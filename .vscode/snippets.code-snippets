{
  // Place your sample-bot workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Slash command template": {
    "prefix": "!slash",
    "body": [
      "import { ChatInputCommandInteraction, inlineCode } from 'discord.js';",
      "import type { Command } from '../../structures/command.js';",
      "import { setTimeout } from 'node:timers/promises';",
      "",
      "export default {",
      "  data: {",
      "    name: 'ping',",
      "    description: 'Pong!',",
      "  },",
      "  opt: {",
      "    userPermissions: ['SendMessages'],",
      "    botPermissions: ['SendMessages'],",
      "    category: 'General',",
      "    cooldown: 5,",
      "  },",
      "  async execute(interaction: ChatInputCommandInteraction<'cached'>) {",
      "    const msg = await interaction.reply({",
      "      content: 'Pinging...',",
      "      withResponse: true,",
      "    });",
      "\r",
      "    await setTimeout(3_000);",
      "\r",
      "    if (!msg.resource?.message) {",
      "      return await interaction.editReply({",
      "        content: 'Failed to obtain accurate ping latency.',",
      "      });",
      "    }",
      "\r",
      "    const ping = msg.resource.message.createdTimestamp - interaction.createdTimestamp;",
      "\r",
      "    return await interaction.editReply({",
      "      content: `Pong! Latency is ${inlineCode(`${ping}ms`)}.\\nAPI Latency is ${inlineCode(`${interaction.client.ws.ping}ms`)}.`,",
      "    });",
      "  },",
      "} satisfies Command;",
      "",
    ],
    "description": "Slash command template",
  },
  "Context menu template": {
    "prefix": "!context",
    "body": [
      "import { ApplicationCommandType, MessageContextMenuCommandInteraction, MessageFlags, hyperlink } from 'discord.js';",
      "import type { Command } from '../../structures/command.js';",
      "",
      "export default {",
      "  data: {",
      "    name: 'Echo',",
      "    type: ApplicationCommandType.Message,",
      "  },",
      "  opt: {",
      "    userPermissions: ['SendMessages'],",
      "    botPermissions: ['SendMessages'],",
      "    category: 'Context',",
      "    cooldown: 5,",
      "  },",
      "  async execute(interaction: MessageContextMenuCommandInteraction<'cached'>) {",
      "    const message = await interaction.targetMessage.fetch();",
      "\r",
      "    if (!message?.content) {",
      "      return await interaction.reply({",
      "        content: hyperlink('No content was found in this message!', message.url),",
      "        flags: MessageFlags.Ephemeral,",
      "      });",
      "    }",
      "\r",
      "    return await interaction.reply({",
      "      content: hyperlink(message.content, message.url),",
      "    });",
      "  },",
      "} satisfies Command;",
      "",
    ],
    "description": "Context menu template",
  },
}
