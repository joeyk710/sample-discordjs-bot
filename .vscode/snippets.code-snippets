{
	// Place your sample-bot workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Slash command template": {
		"prefix": "!slash",
		"body": [
			"import { ChatInputCommandInteraction, inlineCode } from 'discord.js';",
			"import { CommandClass } from '../../structures/command.js';",
			"",
			"export default new CommandClass({",
			"    data: {",
			"        name: 'ping',",
			"        description: 'Pong!',",
			"    },",
			"    opt: {",
			"        userPermissions: ['SendMessages'],",
			"        botPermissions: ['SendMessages'],",
			"        category: 'General',",
			"        cooldown: 5,",
			"        visible: true,",
			"        guildOnly: false,",
			"    },",
			"    async execute(interaction: ChatInputCommandInteraction<'cached'>) {",
			"        const msg = await interaction.reply({",
			"            content: 'Pinging...',",
			"            fetchReply: true",
			"        });",
			"        setTimeout(() => {",
			"            const ping = msg.createdTimestamp - interaction.createdTimestamp;",
			"            interaction.editReply({",
			"                content: `Pong! Latency is ${inlineCode(`${ping}ms`)}. \\nAPI Latency is ${inlineCode(`${interaction.client.ws.ping}ms`)}`",
			"            });",
			"        }, 3000);",
			"    },",
			"})"
		],
		"description": "Slash command template"
	},
	"Context menu template": {
		"prefix": "!context",
		"body": [
			"import { ApplicationCommandType, MessageContextMenuCommandInteraction, hyperlink } from 'discord.js';",
			"import { CommandClass } from '../../structures/command.js';",
			"",
			"export default new CommandClass({",
			"    data: {",
			"        name: 'echo',",
			"        type: ApplicationCommandType.Message,",
			"    },",
			"    opt: {",
			"        userPermissions: ['SendMessages'],",
			"        botPermissions: ['SendMessages'],",
			"        category: 'Context',",
			"        cooldown: 5,",
			"        visible: true,",
			"        guildOnly: false,",
			"    },",
			"    async execute(interaction: MessageContextMenuCommandInteraction<'cached'>) {",
			"        const message = await interaction.targetMessage.fetch();",
			"        if (!message?.content) return interaction.reply({",
			"            content: hyperlink('No content was found in this message!', message.url),",
			"            ephemeral: true",
			"        })",
			"        else return interaction.reply({",
			"            content: hyperlink(message.content, message.url)",
			"        });",
			"    }",
			"});",
			""
		],
		"description": "Context menu template"
	}
}